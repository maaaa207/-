一.位操作符：
1.位与&   逻辑与&&；
2.位或|   逻辑或||；
3.位取反~   逻辑取反！；
4.位异或；真值表：1^1=0  0^0=0  1^0=1  0^1=1
5.左/右移位；
       对于无符号数，左移时右侧补零（相当于逻辑移位）
       对于无符号数，右移时左侧补零（相当于逻辑移位）
       对于有符号数，左移时右侧补零（叫算术移位，相当于逻辑移位）
       对于有符号数，右移时左侧补符号位（如果正数就补零，负数就补一，叫算术移位）
二.位与位或位异或在操作寄存器时的特殊作用：
1.特定位清零&；
       (1)X&1=1；X&0=0
       (2)0xAAAAAAAA,将bit8~bit15清零，即0xFFFF00FF&0xAAAAAAAA
       (3)置0位置0，其他位置1后，求其十六进制数。
2.特定位置1|；
       (1)置1位置1，其余位置0后，求其十六进制数。
3.特定位取反^；
       (1)取反位置1，其余位置0后，求其十六进制数。
三.位运算构建特定二进制数：
1.寄存器位操作经常需要特定位给特定值
       (1)对寄存器特定位置1，置0，取反：
                   构建数与其位与·，位或，位异或
2.移位获取特定位为1的二进制数
3.结合位取反获取特定位为0的二进制数
       (1)获取bit3~bit7为1，同时bit23~bit25为1，其余位为0：
                   ((0x1f<<3)|(7<<23))
       (2)获取bit4~bit10为0，其余位全部为1的数:
                    ~(0x7f<<4)
四.实战：
1.特定位置1：a |= (0b11111 << 3);
2.特定位清0：a &= (~(0b111111111 << 15));
3.取寄存器的特定位：
       (1)保持特定位不变，其余位清0；a&=(0x3f<<3);
       (2)移位特定位:a>>=3;
4.特定寄存器赋值:
       (1)清零特定位；
       (2).值写入特定寄存器；
       unsigned int a = 0xc30288f8;
       a & =~(0x7ff<<7);
       a | =(937<<7);










